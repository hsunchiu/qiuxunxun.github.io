#+hugo_base_dir: ../

* DONE Setup Blog Using Org Mode and Publish on github pages :hugo:emacs:githubpages:
:PROPERTIES:
:EXPORT_FILE_NAME: orgmode-hugo-githubpages
:END:

** Install *hugo*
https://gohugo.io/installation/

** Configurate *ox-hugo* in emacs config's file
https://ox-hugo.scripter.co/doc/installation/

#+begin_src emacs-lisp
  (use-package ox-hugo
    :ensure t   ;Auto-install the package from Melpa
    :pin melpa  ;`package-archives' should already have ("melpa" . "https://melpa.org/packages/")
    :after ox)

  (with-eval-after-load 'ox
    (require 'ox-hugo))
#+end_src

** Use hugo to generate the scaffold

*** 1. Go to home directory and get the blog scaffold
#+begin_src shell
  cd && hugo new site blog && cd blog
#+end_src

*** 2. Use git submodule to get the theme *PaperMod*
#+begin_src shell
  git init
  git submodule add https://github.com/adityatelange/hugo-PaperMod themes/PaperMod
  echo 'theme = "PaperMod"' >> config.toml
#+end_src

*** 3. Append these lines to the site config
   #+begin_src shell
     [markup.goldmark.renderer]
       unsafe = true
   #+end_src

** Write the org file
*** 1. Setup the Hot-Reload
Live listen the content
#+begin_src shell
  mkdir content-org
  hugo server -D --navigateToChanged
#+end_src

Then Open the url
http://localhost:1313/

*** 2. Add `#+hugo_base_dir: ../` to tell ox-hugo the base dir
#+begin_src org
#+hugo_base_dir: ../

\* My first post                                             :tag1:@category1:
:PROPERTIES:
:EXPORT_FILE_NAME: my-first-post
:END:
This is my post body

#+end_src

*** 3. Take the heading to be *DONE,* Shift + left

*** 4. Tangle the file
   `C-c C-e H H`

** Host on github
https://gohugo.io/hosting-and-deployment/hosting-on-github/

*** create github repo

*** add the workflow actions
https://github.com/peaceiris/actions-hugo
#+begin_src yaml
name: GitHub Pages

on:
  push:
    branches:
      - main  # Set a branch to deploy
  pull_request:

jobs:
  deploy:
    runs-on: ubuntu-22.04
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true  # Fetch Hugo themes (true OR recursive)
          fetch-depth: 0    # Fetch all history for .GitInfo and .Lastmod

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.110.0'
          # extended: true

      - name: Build
        run: hugo --minify

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
#+end_src
*** Set =gh-pages= as publish branch and =root= as publish directory in github  `->` settings `->` pages
*** TODO Configuring a custom domain(Optional), Doesn't work
https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site

**** 1. supported custom domains
- Custom domain : www.example.com  blog.example.com
- Apex domain: example.com


** reference
https://ox-hugo.scripter.co/

* Goroutines and Channels
** Goroutines and function call
difference:
#+begin_src go
  f() // call f(); wait for it to return
  go f() // create a new goroutine the call f(); don't wait
#+end_src

** channel
A channel is a =reference= to the data structure created by =make= .
#+begin_src go
  ch := make(chan int)			// ch has type `chan int`
#+end_src

Operations
- send
- revceive
#+begin_src go
  ch <- x 						// a send statement
  x = <-ch 						// a recieve expression in a assignment statement
  <- ch							// a recieve statement; result is discarded
#+end_src

=buffered= or =unbuffered=
A channel with a capacity of zero is unbuffered, otherwise, buffered
#+begin_src go
  ch = make(chan int)// unbuffered channel
  ch = make(chan int, 0) // unbuffered channel
  ch = make(chan int, 3) // buffered channel with capacity 3
#+end_src

*** unbuffered channels
A send operation on an unbuffered channel blocks the sendings goroutine until another goroutine executes corresponding recieve on the same channel. Conversely, if the recieve operation was attempted first, the receiving goroutine is blocked until another goroutine send on the same channel.So, we can use =unbuffered= channel to =synchronize= goroutine.

*** Unidirection Channel Types
Expose only one or the other of the send and recieve oeprations.
- `chan <- int` a =send-only= channel of init, allows receive but not sends
- `<-chan int`, a =recieve-only= channel
Note: https://stackoverflow.com/questions/59283469/how-to-be-not-confused-about-a-channel-direction-in-go
